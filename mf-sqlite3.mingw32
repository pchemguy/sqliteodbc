#!/usr/make
#
# Makefile for SQLITE, use in conjunction with mingw-build.sh
# since some patches are needed (libshell.c etc.)

#### The toplevel directory of the source tree.  This is the directory
#    that contains this "Makefile.in" and the "configure.in" script.
#

ME_DIR := $(abspath $(lastword $(MAKEFILE_LIST)))
ME_DIR := $(patsubst %/,%,$(dir $(ME_DIR)))
SQLITE3_DIST := $(ME_DIR)/sqlite3
BUILD_DIR := $(SQLITE3_DIST)/build
SQLITE3_INC := $(BUILD_DIR)


OPT_FEATURE_FLAGS_EX := \
  -DSQLITE_DQS=0 \
  -DSQLITE_LIKE_DOESNT_MATCH_BLOBS \
  -DSQLITE_MAX_EXPR_DEPTH=0 \
  -DSQLITE_OMIT_DEPRECATED \
  -DSQLITE_DEFAULT_FOREIGN_KEYS=1 \
  -DSQLITE_DEFAULT_SYNCHRONOUS=1 \
  -DSQLITE_SOUNDEX \
  -DSQLITE_ENABLE_COLUMN_METADATA \
  -DSQLITE_ENABLE_DBPAGE_VTAB \
  -DSQLITE_ENABLE_DBSTAT_VTAB \
  -DSQLITE_ENABLE_EXPLAIN_COMMENTS \
  -DSQLITE_ENABLE_FTS3_PARENTHESIS \
  -DSQLITE_ENABLE_FTS3_TOKENIZER \
  -DSQLITE_ENABLE_QPSG \
  -DSQLITE_ENABLE_RBU \
  -DSQLITE_ENABLE_STMTVTAB \
  -DSQLITE_ENABLE_STAT4 \
  -DSQLITE_ENABLE_OFFSET_SQL_FUNC \
  -DSQLITE_SHELL_IS_UTF8


CFLAGS_EX := \
  -static-libgcc \
  -static-libstdc++

OPT_FEATURE_FLAGS := $(OPT_FEATURE_FLAGS_EX)
CFLAGS := $(CFLAGS_EX)

#======
include $(BUILD_DIR)/Makefile
#======

CCCLI := $(TCC:-I$(ME_DIR)/sqlite3%=) $(TEMP_STORE) -I$(SQLITE3_INC)
CCCLI += \
  -Wl,--strip-all,--kill-at \
  -Wl,--output-def,"$(BUILD_DIR)/sqlite3.def" \
  -Wl,--out-implib,"$(BUILD_DIR)/libsqlite3.a"

# 
###############################################################################
echo_TCC:
	@echo ------------------------------------------------------------------------
	@sed -e 's/ /\n/g' <<< '$(TCC)'
	@echo ------------------------------------------------------------------------

echo_CCCLI:
	@echo '$(BUILD_DIR) - BUILD_DIR'
	@echo '$(SQLITE3_DIST) - SQLITE3_DIST'
	@echo ------------------------------------------------------------------------
	@sed -e 's/ /\n/g' <<< '${CCCLI}'
	@echo ------------------------------------------------------------------------

# Generates amalgamation and other relevant files via the native Makefile.
sqlite3_c:
	@$(MAKE) -C "$(BUILD_DIR)" "$(@:_c=.c)"

# Compiles amalgamation using amended compile
# options from the included native Makefile
sqlite3.o: sqlite3_c
	cd "$(BUILD_DIR)"; \
	$(CCCLI) -c -o "$@" "$(@:.o=.c)"

# Generates dll/o/lib/def files via the native Makefile.
# Compile options are extended via the exported flags.
sqlite3_dll:
	@export OPT_FEATURE_FLAGS='$(OPT_FEATURE_FLAGS_EX)'; \
	export CFLAGS='$(CFLAGS_EX)'; \
	$(MAKE) -C "$(BUILD_DIR)" "$(@:_dll=.dll)"

# Generates dll using amended compile
# options from the included native Makefile
sqlite3-dll: sqlite3.o
	cd "$(BUILD_DIR)"; \
	$(CCCLI) -shared -o "$(@:-dll=.dll)" "$(@:-dll=.o)"

#build/abc.txt:
#	@touch $@
#	@pwd
#    cd $(SQLITE3_DIST); \
#	@pwd
#    make sqlite3.c
    



#exe: sqlite3.o

#sqlite3.dll: $(REAL_LIBOBJ) sqlite3.def
#	$(TCC) -shared -o $@ sqlite3.def \
#		-Wl,"--strip-all" $(REAL_LIBOBJ)
