#!/usr/make
#
# Makefile for SQLITE, use in conjunction with mingw-build.sh
# since some patches are needed (libshell.c etc.)

#### The toplevel directory of the source tree.  This is the directory
#    that contains this "Makefile.in" and the "configure.in" script.
#

SQLITE3_DIR := $(abspath $(lastword $(MAKEFILE_LIST)))
SQLITE3_DIR := $(patsubst %/,%,$(dir $(SQLITE3_DIR)))/sqlite3
SQLITE3_BLD := $(SQLITE3_DIR)/build
SQLITE3_INC := $(SQLITE3_BLD)
SQLITE3_SRC := $(SQLITE3_BLD)

OPT_FEATURE_FLAGS_EX := \
  -DSQLITE_DQS=0 \
  -DSQLITE_LIKE_DOESNT_MATCH_BLOBS \
  -DSQLITE_MAX_EXPR_DEPTH=0 \
  -DSQLITE_OMIT_DEPRECATED \
  -DSQLITE_DEFAULT_FOREIGN_KEYS=1 \
  -DSQLITE_DEFAULT_SYNCHRONOUS=1 \
  -DSQLITE_SOUNDEX \
  -DSQLITE_ENABLE_COLUMN_METADATA \
  -DSQLITE_ENABLE_DBPAGE_VTAB \
  -DSQLITE_ENABLE_DBSTAT_VTAB \
  -DSQLITE_ENABLE_EXPLAIN_COMMENTS \
  -DSQLITE_ENABLE_FTS3_PARENTHESIS \
  -DSQLITE_ENABLE_FTS3_TOKENIZER \
  -DSQLITE_ENABLE_QPSG \
  -DSQLITE_ENABLE_RBU \
  -DSQLITE_ENABLE_STMTVTAB \
  -DSQLITE_ENABLE_STAT4 \
  -DSQLITE_ENABLE_OFFSET_SQL_FUNC \
  -DSQLITE_SHELL_IS_UTF8 \
  -DSQLITE_TEMP_STORE=1

CFLAGS_EX := \
  -static-libgcc \
  -static-libstdc++

OPT_FEATURE_FLAGS := $(OPT_FEATURE_FLAGS_EX)
CFLAGS := $(CFLAGS_EX)

#==============================
include $(SQLITE3_INC)/Makefile
#==============================

CCCLI := $(TCC:-I$(SQLITE3_DIR)%=) -I$(SQLITE3_INC) -Wall
CCCLI += -Wl,--strip-all,--kill-at
LIB_EXPORT := -Wl,--output-def,"$(SQLITE3_BLD)/sqlite3.def" \
              -Wl,--out-implib,"$(SQLITE3_BLD)/libsqlite3.a"

# 
###############################################################################
echo_TCC_Bare:
	@echo '$(TCC)'

echo_CCCLI_Bare:
	@echo '$(CCCLI)'

get_compile_cli:
	@echo '$(CCCLI)'

echo_TCC:
	@echo ------------------------------------------------------------------------
	@sed -e 's/ /\n/g' <<< '$(TCC)'
	@echo ------------------------------------------------------------------------

echo_CCCLI:
	@echo ------------------------------------------------------------------------
	@sed -e 's/ /\n/g' <<< '${CCCLI}'
	@echo ------------------------------------------------------------------------

# Generates amalgamation and other relevant files via the native Makefile.
sqlite3_c:
	@$(MAKE) -C "$(SQLITE3_BLD)" "$(@:_c=.c)"

# Compiles amalgamation using amended compile
# options from the included native Makefile
sqlite3.o: sqlite3_c
	cd "$(SQLITE3_BLD)"; \
	$(CCCLI) -c -o "$@" "$(@:.o=.c)"

# Generates dll/o/lib/def files via the native Makefile.
# Compile options are extended via the exported flags.
sqlite3_dll:
	@export OPT_FEATURE_FLAGS='$(OPT_FEATURE_FLAGS_EX)'; \
	export CFLAGS='$(CFLAGS_EX)'; \
	$(MAKE) -C "$(SQLITE3_BLD)" "$(@:_dll=.dll)"

# Generates dll using amended compile
# options from the included native Makefile
sqlite3-dll: sqlite3.o
	cd "$(SQLITE3_BLD)"; \
	$(CCCLI) $(LIB_EXPORT) -shared -o "$(@:-dll=.dll)" "$(@:-dll=.o)"
